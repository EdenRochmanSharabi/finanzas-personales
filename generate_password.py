#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para generar contrase√±as hasheadas para la autenticaci√≥n
Ejecutar: python generate_password.py

IMPORTANTE: Este script debe ejecutarse LOCALMENTE, nunca subir al repositorio
las contrase√±as generadas. El archivo config.yaml debe estar en .gitignore
"""

import streamlit_authenticator as stauth
import yaml
import os
import sys
from pathlib import Path

def validate_password(password: str) -> tuple[bool, str]:
    """Validar que la contrase√±a cumpla requisitos m√≠nimos de seguridad"""
    if len(password) < 8:
        return False, "La contrase√±a debe tener al menos 8 caracteres"
    
    if not any(c.isupper() for c in password):
        return False, "La contrase√±a debe contener al menos una may√∫scula"
    
    if not any(c.islower() for c in password):
        return False, "La contrase√±a debe contener al menos una min√∫scula"
    
    if not any(c.isdigit() for c in password):
        return False, "La contrase√±a debe contener al menos un n√∫mero"
    
    if not any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password):
        return False, "La contrase√±a debe contener al menos un car√°cter especial"
    
    return True, "Contrase√±a v√°lida"

def validate_email(email: str) -> tuple[bool, str]:
    """Validaci√≥n b√°sica de email"""
    if '@' not in email or '.' not in email:
        return False, "Email inv√°lido"
    
    if len(email) < 5:
        return False, "Email demasiado corto"
    
    return True, "Email v√°lido"

def main():
    """Generar contrase√±a hasheada con validaciones"""
    print("üîê Generador de contrase√±as para Finanzas Personales")
    print("=" * 60)
    print("‚ö†Ô∏è  IMPORTANTE: Este script genera credenciales SEGURAS")
    print("   El archivo config.yaml NO debe subirse al repositorio")
    print("=" * 60)
    
    # Verificar si ya existe config.yaml
    config_path = Path('config.yaml')
    if config_path.exists():
        print("‚ö†Ô∏è  ADVERTENCIA: Ya existe un archivo config.yaml")
        overwrite = input("¬øDeseas sobrescribirlo? (s/N): ").strip().lower()
        if overwrite != 's':
            print("‚ùå Operaci√≥n cancelada")
            return
    
    # Solicitar datos con validaciones
    while True:
        username = input("Usuario (ej: admin): ").strip()
        if len(username) < 2:
            print("‚ùå El usuario debe tener al menos 2 caracteres")
            continue
        if ' ' in username:
            print("‚ùå El usuario no puede contener espacios")
            continue
        break
    
    while True:
        name = input("Nombre completo: ").strip()
        if len(name) < 2:
            print("‚ùå El nombre debe tener al menos 2 caracteres")
            continue
        break
    
    while True:
        email = input("Email: ").strip()
        is_valid, message = validate_email(email)
        if not is_valid:
            print(f"‚ùå {message}")
            continue
        break
    
    while True:
        password = input("Contrase√±a: ").strip()
        is_valid, message = validate_password(password)
        if not is_valid:
            print(f"‚ùå {message}")
            print("üí° Sugerencia: Usa al menos 8 caracteres con may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos")
            continue
        
        # Confirmar contrase√±a
        confirm_password = input("Confirmar contrase√±a: ").strip()
        if password != confirm_password:
            print("‚ùå Las contrase√±as no coinciden")
            continue
        break
    
    print("\n" + "=" * 60)
    print("‚úÖ Datos validados correctamente")
    print("üîê Generando hash de contrase√±a...")
    
    try:
        # Generar hash de la contrase√±a
        hashed_password = stauth.Hasher([password]).generate()[0]
        
        # Crear configuraci√≥n
        config = {
            'credentials': {
                'usernames': {
                    username: {
                        'email': email,
                        'name': name,
                        'password': hashed_password
                    }
                }
            }
        }
        
        # Guardar en archivo
        with open('config.yaml', 'w') as file:
            yaml.dump(config, file, default_flow_style=False, sort_keys=False)
        
        print("‚úÖ Configuraci√≥n guardada en config.yaml")
        print("\nüìã Resumen de credenciales:")
        print(f"üë§ Usuario: {username}")
        print(f"üìß Email: {email}")
        print(f"üîë Contrase√±a: {'*' * len(password)}")
        print(f"üìÅ Archivo: {config_path.absolute()}")
        
        print("\nüîí Seguridad:")
        print("‚úÖ Contrase√±a hasheada con bcrypt")
        print("‚úÖ Archivo config.yaml creado")
        print("‚úÖ config.yaml est√° en .gitignore (no se subir√° al repo)")
        
        print("\nüí° Pr√≥ximos pasos:")
        print("1. Verifica que config.yaml NO est√© en git: git status")
        print("2. Ejecuta la aplicaci√≥n: streamlit run app.py")
        print("3. Usa las credenciales para acceder")
        
        # Verificar que el archivo est√° en .gitignore
        gitignore_path = Path('.gitignore')
        if gitignore_path.exists():
            with open(gitignore_path, 'r') as f:
                gitignore_content = f.read()
                if 'config.yaml' in gitignore_content:
                    print("‚úÖ config.yaml est√° correctamente en .gitignore")
                else:
                    print("‚ö†Ô∏è  ADVERTENCIA: config.yaml NO est√° en .gitignore")
                    print("   Agrega 'config.yaml' al archivo .gitignore")
        else:
            print("‚ö†Ô∏è  ADVERTENCIA: No se encontr√≥ archivo .gitignore")
            print("   Crea un archivo .gitignore con 'config.yaml'")
        
    except Exception as e:
        print(f"‚ùå Error al generar configuraci√≥n: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
